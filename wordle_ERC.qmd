---
title: "wordle"
author: "Erika Carlson"
date: 2024-02-19
format: html
editor_options: 
  chunk_output_type: console
---

# Creating a Wordle Game {.unnumbered}

## **Wordle** Puzzle Challenge {.unnumbered}

The rules of **Wordle** are simple: A player has SIX tries to guess a 5-letter word that has been selected at random from a list of possible words. Guesses need to be valid 5-letter words. After each guess, a player receives feedback about how close their guess was to the word, which provides information they can use to try to solve the puzzle. This feedback lets you know whether each letter your guess is either [1] *in the solution word and in the correct spot*, [2] *in the solution word but in the wrong position*, or [3] *not in the solution word*. In app/browser versions of **Wordle**, this feedback is provided visually using colors, but that need not be the case.

The assignment and steps below were inspired by [this fun blog post](https://statisticaloddsandends.wordpress.com/2022/01/18/playing-wordle-in-r/)

## Preliminaries

Two data files were downloaded from https://github.com/difiore/ada-2024-datasets to repo:
* collins-scrabble-words-2019.txt
* google-10000-english-usa-no-swears.txt

The first (279,497 lines long) contains a list of “Official Scrabble Words” in the English language based on the ***Collins English Dictionary*** published by HarperCollins. The first line in the file is the header “words”.

The second (9885 lines long) contains a list of ~10,000 of the most common words in the English language, based on data compiled by Google, and omitting common swear words. The first line in the file is the header “words”.

```{r}
valid_file <- "https://raw.githubusercontent.com/ecarlson5683/exercise-04/main/collins-scrabble-words-2019.txt"

solution_file <- "https://raw.githubusercontent.com/ecarlson5683/exercise-04/main/google-10000-english-usa-no-swears.txt"
```


#### Introduction {.unnumbered}

Breaking down the problem into discrete pieces

* What do we need to do to **set** up a Wordle game? 
* What **steps** does game play need to follow? 
* What has to be **evaluated** at each step? 
* How does the game **end**?

**Things to do**

* Choose a mystery "solution" word that players will try to guess. The list of the most common words in the English language is a possible source of solution words for the puzzle.
* Establish a dictionary of "valid" words that players can guess using the list of Official Scrabble Words.

> **NOTE:** The list of possible "solution" words used in the original Wordle puzzle consists of ~2100 5-letter words, while the list of "valid" words that can be used as guesses totals ~13,000. Here, `solution_list` has 9884 words, while `valid_list` has 279496 words.

#### Step 1 {.unnumbered}

Created function `load_dictionary()` with single argument, "filename", to read in csv files.

Used `load_dictionary()` to create two variables, **solution_list** and **valid_list**, that contain *vectors* of possible solution words and valid words to guess.

```{r}
#| warning: false

load_dictionary <- function(filename){
  library(tidyverse)
  x <- read_csv(filename, col_names=TRUE) %>% # Create data frame
    pull(words) # Extract vector of first column (header = words) in data frame
  return(x) # Explicitly return output of pipe
}

valid_list <- load_dictionary(valid_file) # Run function to create a character string of Official Scrabble Words
solution_list <- load_dictionary(solution_file) # Run function to create a character string of common words

str(valid_list) # Verify structure of new variable
str(solution_list) # Verify structure of new variable
```


#### Step 2 {.unnumbered}

Winnowed **solution_list** to only include words that are included in **valid_list** using `intersect()`.

```{r}
solution_list <- intersect(solution_list, valid_list)

length(solution_list) %>% 
  print() # Number of words in updated solution_list
```

#### Step 3 {.unnumbered}

Wrote a custom function called `pick_solution()` that [1] removes all words from **solution_list** that are not 5 letters in length using `subset()`, [2] then randomly chooses a single word from those that remain using `sample()`, and [3] then splits that word into a vector of single-character elements using `str_split()`. 

Passed **solution_list** vector as the argument to the function and assigned the result to **solution**.

> Potential modification: include a second argument in `pick_solution()` function called "word_length" that allows for a solution word that is something other than 5 characters long.

```{r}
# x <- solution_list[1:100] # Testing function on a subset of solution_list (replaced word with x)

pick_solution <- function(word){
  word %>% subset(., nchar(., type = "chars") == 5) %>% # Subset the `solution_list` vector according to some criterion of word length. Outputs strings containing exactly 5 characters
    sample(., 1) %>% # Randomly choose a single string (word) from those with exactly 5 characters
    str_split(., pattern = "") # Split the randomly selected string (word) into a vector of single-character elements. An empty pattern, "", is equivalent to boundary("character")
}

solution <- pick_solution(solution_list)[[1]] # Run function to create a vector of single-letter strings, the letters of the solution word
```

#### Step 4 {.unnumbered}

Created two more functions: `play_wordle()` with three arguments: [1] the answer to the puzzle (the value of the **solution** variable), [2] a list of valid guesses (the contents of the **valid_list** variable), and [3] a value for "number of guesses", which defaults to 6 in the original **Wordle** game.

The `play_wordle()` function:

1. Tells the player the rules of the game

2. Displays what letters the player has not yet guessed (initially all 26 in alphabet)

3. Prompts the player for a guess, reads in their guess, and checks that their guess is valid (i.e., that it contains the correct number of letters and is a word included in the "valid" word list).

4. Compares the guess to the solution word and generates the necessary feedback, e.g., `<letter>` for *in the word and in the correct position*, `*` for *in the word but in the wrong position*, and `-` for *not in the word*. Uses a separate "helper" function, `evaluate_guess()`, called from within `play_wordle()`. This function has two arguments: the player's guess and the value of the **solution** variable.

5. Updates the list of letters not yet guessed.

6. Checks if the puzzle was solved. If so, the player is told they WON the game and receive a print out of their guess and feedback history. If not, the player is prompted for another guess, unless they have already hit the maximum number of guesses allowed.

7. If all guesses are exhausted, the function should indicate that the player LOST the game and, again, print out their guess and feedback history.


```{r}
play_wordle <- function(solution, valid_list, num_guesses=6){

  feedback <- list() # Create an empty list for results of evaluate_guess()
  
  for (i in 1:num_guesses) { # Create a loop for guessing (replaced `num_guesses` with `i` to count up), Step 4.6
  
  # Tell game rules
  n_length <- length(solution) # Return the length of the vector **solution** (5 single-letter strings)
  chances <- if(i == 1){num_guesses # Update chances as player guesses
  } else {num_guesses - (i - 1)}
  cat("You have", chances, "chances left to guess a", n_length, "letter word.\n") # Create a string for rules sentence with modifiable guess number and word length, then output. Alternative to `print(paste0())`
  
  # Display a key for feedback
  if(i==1){cat("Key: * = wrong place in word, - = not in word.\n") # Use \n to break to new line
  } else {NULL}
  
  # Display letters left
  letters_left <- if(i == 1){LETTERS # Update letters as player guesses
  } else {letters_left}
  cat("Letters left:", letters_left) # Create a string of alphabet then output. Alternative to `paste(LETTERS, collapse = " ")` then `print(paste0())`
  
  # Prompt player for a guess
  guess <- readline(prompt = paste("Enter guess number", i, "then press <enter>: ")) # Take a character string as an argument and provide a "prompt" entering a line of numeric or character data
  
  # Convert guess entry to uppercase
  guess <- toupper(guess)
  
  # Check validity of guess
  while (is.character(guess)) {
  if(nchar(guess, type = "chars") != 5) { # Check for non-5-letter words and reprompt guess
    cat("Invalid entry: Not a 5-letter word. Please try again. \nLetters left:", letters_left) 
    guess <- readline(prompt = paste("Enter guess number", i, "then press <enter>: "))
    guess <- toupper(guess)
  } else if(!(guess %in% valid_list)) { # Check for non-valid words and reprompt guess
    cat("Invalid entry: Not a valid word. Please try again. \nLetters left:", letters_left)
    guess <- readline(prompt = paste("Enter guess number", i, "then press <enter>: "))
    guess <- toupper(guess)
  } else { 
    feedback[[i]] <- evaluate_guess(guess, solution) # Name the results of evaluate_guess() to record feedback
    break # End loop so run evaluate_guess() is run only once
  }
  }
  
  # Update the list of letters guessed
  guess_letters <- str_split(guess, "")[[1]]
  letters_left <- setdiff(letters_left, guess_letters) # Overwrite letters_left to remove letters of guess
  
  # Create a matrix of feedback for game summary
  summary <- matrix(unlist(feedback, use.names = FALSE), ncol = 5, byrow = TRUE)
  dimnames(summary) <-list(rep("", dim(summary)[1]), rep("", dim(summary)[2]))
  
  # Check if puzzle is solved
  if(identical(guess_letters, solution)) {
    cat("\nCongratulations Wordler, you won!\n\nGuess summary:\n")
    print(noquote(summary)) # Print guess and feedback history without quotes
    break # end loop
  } else if (!identical(guess_letters, solution) & i < num_guesses) { 
    # Loop to beginning, now with updated letter list for remaining guesses
  } else {
    cat("\nNo more guesses. Better luck next time! Solution:", solution, "\n\nGuess summary:\n") # Loop ends, notify player of loss and correct solution
    print(noquote(summary)) # Print guess and feedback history without quotes
  }
  
  }
  
}
```

```{r}
# Helper function to evaluate valid guesses

evaluate_guess <- function(guess, solution){
  
  library(tidyverse)
  
  guess_letters <- str_split(guess, "")[[1]]
  
  for (i in 1:length(guess_letters)) {
  output <- case_when(guess_letters[] == solution[] ~ guess_letters[], # Fill in correct letter
                      guess_letters[] %in% solution[] ~ "*",
                      guess_letters[] != solution[] ~ "-"
                      )
  }
  cat("", guess_letters, "\n", output, "\n") # Show guess, then feedback, then move to a new line
  feedback <- list(guess = guess_letters, output = output) # Create list of objects to be exported from function
  return(feedback) # Export from function to store feedback
}
```

```{r}
#| eval: false

# Play wordle!
play_wordle(solution, valid_list)
```
 

#### Optional Next Steps {.unnumbered}

- Try modifying your code to mimic the "hard mode" in **Wordle**, where information about the letters in the solution and their positions revealed in prior guesses has to be used in subsequent guesses.

- Try spicing up the feedback given using colors or alternative formatting. One way to do this would be to use the {huxtable} package, which is a package for creating text tables that can be styled for display in the ***R*** console and can also output to HTML, PDF, and a variety of other formats.

- Have ***R*** keep track of the date and not let you play more than one **Wordle** game per day.

- Have ***R*** keep track of your performance across multiple games of **Wordle**.

- Allow ***R*** to post your **Wordle** results to a social media platform of your choosing. For this, check out, e.g., the {Rfacebook} or {rtweet} packages.

- Convert your code to an interactive {shiny} app to have it run in a web browser. Later modules will introduce you to programming with {shiny}. 

```{r}
#| eval: false

# Modification to colored blocks in feedback
# Helper function to evaluate valid guesses
guess_test <- "NOSES" # replacing `guess` to test evaluate_guess()

install.packages("huxtable") # adding color to feedback

evaluate_guess <- function(guess_test, solution){
  
  library(huxtable)
  library(tidyverse)
  
  guess_letters <- str_split(guess_test, "")[[1]]
  
  for (i in 1:length(guess_letters)) {
  output <- case_when(guess_letters[] == solution[] ~ guess_letters[], # Fill in correct letter
                      guess_letters[] %in% solution[] ~ "*",
                      guess_letters[] != solution[] ~ "-"
                      )
  # Add color to feedback
  output <- as_hux(matrix(unlist(output, use.names = FALSE), ncol = 5, byrow = TRUE))
  output <- set_background_color(where(output[1:5]), "green") %>% set_text_color(everywhere, "white") %>% set_all_borders(brdr(2, "solid", "white")) 
  }
  print(output)
  # cat("", guess_letters, "\n", output, "\n") # Show guess, then feedback, then move to a new line
  feedback <- list(guess = guess_letters, output = output) # Create list of objects to be exported from function
  return(feedback) # Export from function to store feedback
}

evaluate_guess(guess_test, solution)
```

 
 
## Failed strategies 

```{r}
# Step 3

# failed strategy for subsetting solution list by character

# string <- solution_list[1:100] # testing function on a subset of solution_list
# 
# pick_solution <- function(string){
  # string %>% str_subset(., pattern = "[a-z]{5}")
# }



# Step 4

# failed strategy 1 for valid guess check

  # case_when(
  #   guess %in% valid_list & nchar(guess, type = "chars") == 5 ~ letters_left, # ToDo: should go to evaluate_guess()
  #   nchar(guess, type = "chars") != 5 ~ readline("Error: Not a 5-letter word. Re-enter guess then press <enter>: "), # ToDo: should go back to update `guess `
  #   !(guess %in% valid_list) ~ readline("Error: Not a valid word. Re-enter guess then press <enter>: "), # ToDo: should go back to update `guess `
  #   .default = NULL
  #   ) 
 

# failed strategy 2 for valid guess check

  # while (nchar(guess, type = "chars") != 5) {
  #   cat("Error: Not a 5-letter word.")
  #   guess <- readline(guess_prompt) # overwriting guess
  # }
  # 
  # while (!(guess %in% valid_list) {
  #   cat("Error: Not a valid word.")
  #   guess <- readline(guess_prompt) # overwriting guess
  # }
  # 
  # while (guess %in% valid_list & nchar(guess, type = "chars") == 5) {
  #   # evaluate_guess()
  # }

# failed strategy 3 for valid guess check (only need to check for non-valid entries, then continue)

  # while (is.character(guess)) {
  # if(guess %in% valid_list & nchar(guess, type = "chars") == 5){
  #   print("Continue")
  #   # evaluate_guess() # to write
  #   guess <- readline(prompt = paste("Enter guess number", num_guesses, "then press <enter>: "))
  # } else if(nchar(guess, type = "chars") != 5) {
  #   print("Invalid entry: Not a 5-letter word. Please try again.")
  #   guess <- readline(prompt = paste("Enter guess number", num_guesses, "then press <enter>: "))
  # } else { 
  #   print("You exited the game.")
  #   break
  # }
  # }
```


